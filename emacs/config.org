#+TITLE: Emacs Configuration
#+AUTHOR: John Szaniszlo

Based on the [[https://github.com/jamescherti/minimal-emacs.d/][minimal-emacs.d]] project by James Cherti.

* Basic Settings
** Init files at various init points

Prevent config files from being byte-compiled and to activate lexical binding as [[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#customizations-never-modify-initel-and-early-initel-modify-these-instead][required by minimal-emacs.d]]:

#+BEGIN_SRC emacs-lisp :tangle pre-early-init.el
  ;;; pre-early-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-early-init.el
  ;;; post-early-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle post-init.el
  ;;; post-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-
#+END_SRC

** System
*** Debugging

#+begin_src emacs-lisp :tangle pre-early-init.el
  (defvar minimal-emacs-debug nil
    "Non-nil to enable debug.")
#+end_src

*** Ensure all packages are installed by default

#+BEGIN_SRC emacs-lisp :tangle post-init.el
  (setq use-package-always-ensure t)
#+END_SRC

*** Use :demand for all packages when in daemon mode

#+BEGIN_SRC emacs-lisp :tangle post-init.el
  (if (daemonp)
      (setq use-package-always-demand t))
#+END_SRC

*** Native Compilation

#+begin_src elisp :tangle post-init.el
  (use-package compile-angel
   :ensure t
   :custom
   (compile-angel-verbose t)

   :config
   (push "/init.el" compile-angel-excluded-files)
   (push "/early-init.el" compile-angel-excluded-files)
   (push "/pre-init.el" compile-angel-excluded-files)
   (push "/post-init.el" compile-angel-excluded-files)
   (push "/pre-early-init.el" compile-angel-excluded-files)
   (push "/post-early-init.el" compile-angel-excluded-files)

   (compile-angel-on-load-mode 1))
#+end_src

*** Display startup time

Report the startup duration and the number of garbage collections that occurred during initialization.

#+begin_src emacs-lisp :tangle pre-early-init.el
(defun display-startup-time ()
  "Display the startup time and number of garbage collections."
  (message "Emacs init loaded in %.2f seconds (Full emacs-startup: %.2fs) with %d garbage collections."
           (float-time (time-subtract after-init-time before-init-time))
           (time-to-seconds (time-since before-init-time))
           gcs-done))

(add-hook 'emacs-startup-hook #'display-startup-time 100)
#+end_src

*** ~PATH~
**** MacOS specific path fix for libgccjit
Fix for [[https://github.com/d12frosted/homebrew-emacs-plus/issues/733][libgccjit.so error invoking gcc driver]] on MacOS homebrew installations

#+begin_src emacs-lisp :tangle pre-early-init.el
  (defun homebrew-gcc-paths ()
    "Return GCC library paths from Homebrew installations.
  Detects paths for gcc and libgccjit packages to be used in LIBRARY_PATH."
    (let* ((paths '())
           (brew-bin (or (executable-find "brew")
                         (let ((arm-path "/opt/homebrew/bin/brew")
                               (intel-path "/usr/local/bin/brew"))
                           (cond
                            ((file-exists-p arm-path) arm-path)
                            ((file-exists-p intel-path) intel-path))))))

      (when brew-bin
        ;; Get gcc paths.
        (let* ((gcc-prefix (string-trim
                            (shell-command-to-string
                             (concat brew-bin " --prefix gcc"))))
               (gcc-lib-current (expand-file-name "lib/gcc/current" gcc-prefix)))
          (push gcc-lib-current paths)

          ;; Find apple-darwin directory.
          (let* ((default-directory gcc-lib-current)
                 (arch-dirs (file-expand-wildcards "gcc/*-apple-darwin*/*[0-9]")))
            (when arch-dirs
              (push (expand-file-name
                     (car (sort arch-dirs #'string>)))
                    paths))))

        ;; Get libgccjit paths
        (let* ((jit-prefix (string-trim
                            (shell-command-to-string
                             (concat brew-bin " --prefix libgccjit"))))
               (jit-lib-current (expand-file-name "lib/gcc/current" jit-prefix)))
          (push jit-lib-current paths)))

      (nreverse paths)))

  (defun setup-macos-native-comp-library-paths ()
    "Set up LIBRARY_PATH for native compilation on macOS.
  Includes Homebrew GCC paths and CommandLineTools SDK libraries."
    (let* ((existing-paths (split-string (or (getenv "LIBRARY_PATH") "") ":" t))
           (gcc-paths (homebrew-gcc-paths))
           (clt-paths '("/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"))
           (unique-paths (delete-dups
                          (append existing-paths gcc-paths clt-paths))))

      (setenv "LIBRARY_PATH" (mapconcat #'identity unique-paths ":"))))

  ;; Set up library paths for native compilation on macOS.
  (when (eq system-type 'darwin)
    (setup-macos-native-comp-library-paths))
#+end_src

**** Add system path to emacs exec-path
#+begin_src elisp :tangle post-init.el
  (use-package exec-path-from-shell
    :init
    :hook
    (after-init . exec-path-from-shell-initialize))
#+end_src

** Reduce clutter

Keep ~~/.emacs.d/~ clean using the [[https://github.com/emacscollective/no-littering][~no-littering~]] package.

#+begin_src elisp :tangle post-init.el
  (use-package no-littering
    :config
    (no-littering-theme-backups))
#+end_src

Use a dedicated file for Emacs customizations.

#+begin_src emacs-lisp :tangle post-init.el
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
#+end_src

Move native compilation cache into ~/var~.

#+begin_src emacs-lisp :tangle post-early-init.el
  (when (and (fboundp 'startup-redirect-eln-cache)
             (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (startup-redirect-eln-cache
     (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src

** Activate ~recentf~, ~savehist~, ~saveplace~, and ~auto-revert~

This code activate preconfigured packages by =minimal-emacs.d= ~init.el~. ([[https://github.com/jamescherti/minimal-emacs.d?tab=readme-ov-file#how-to-activate-recentf-savehist-saveplace-and-auto-revert][source]])

#+begin_src emacs-lisp :tangle post-init.el
  (add-hook 'after-init-hook #'global-auto-revert-mode)
  (add-hook 'after-init-hook #'recentf-mode)
  (add-hook 'after-init-hook #'savehist-mode)
  (add-hook 'after-init-hook #'save-place-mode)
#+end_src

Ignore the ~no-littering~ var files from ~recentf~, but only after the package has been loaded.

#+begin_src emacs-lisp :tangle post-init.el
  (add-hook 'recentf-mode-hook
            (lambda ()
              (add-to-list 'recentf-exclude
                           (recentf-expand-file-name no-littering-var-directory))))
#+end_src

** dir-config.el for Local configs

#+begin_src elisp :tangle post-init.el
  (use-package dir-config
    :custom
    (dir-config-file-names '(".dir-config.el"))
    (dir-config-allowed-directories '("~/Development" "~/Documents"))
    :config
    (dir-config-mode))
#+end_src

* Look and Feel
** ultra-scroll

[[https://github.com/jdtsmith/ultra-scroll][Scroll emacs like lightning]] ‚ö°üñ±Ô∏è‚ö°

#+begin_src elisp :tangle post-init.el
  (use-package ultra-scroll
    :vc (:url "https://github.com/jdtsmith/ultra-scroll" :branch "main")
    :init
    (setq scroll-conservatively 101 ; important!
          scroll-margin 0)
    :config
    (ultra-scroll-mode 1))
#+end_src

** Theming
*** the wonderful kanagawa themes
The excellent [[https://github.com/rebelot/kanagawa.nvim][kanagawa.nvim]] theme ported to emacs.

#+begin_src elisp :tangle post-init.el
  (use-package kanagawa-themes
    :config
    (load-theme 'kanagawa-wave))
#+end_src

*** auto switch between light and dark modes

#+begin_src elisp :tangle post-init.el
  (use-package auto-dark
    :custom
    (auto-dark-themes '((kanagawa-wave) (kanagawa-lotus)))
    :init
    (auto-dark-mode))
#+end_src

** Fonts
*** Font bootstrapping

#+begin_src elisp :tangle post-init.el
    (defun jj/setup-font-faces ()
    "Setup all font faces."
    (when (display-graphic-p)
      (let ((mono-spaced "VictorMono Nerd Font")
            (prop-spaced "iA Writer Duo S"))
        (set-face-attribute 'default nil :family mono-spaced :height 190)
        (set-face-attribute 'fixed-pitch nil :family mono-spaced :height 1.0)
        (set-face-attribute 'variable-pitch nil :family prop-spaced :height 0.8))
      (with-eval-after-load 'org
        (dolist (face '((org-level-1 . 1.3)
                        (org-level-2 . 1.25)
                        (org-level-3 . 1.20)
                        (org-level-4 . 1.15)
                        (org-level-5 . 1.10)
                        (org-level-6 . 1.05)
                        (org-level-7 . 1.0)
                        (org-level-8 . 1.0)))
          (set-face-attribute (car face) nil :font "iA Writer Duo S" :weight 'regular :height (cdr face))
          )
        (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
        )
      )
    )
  (add-hook 'after-init-hook 'jj/setup-font-faces)
  (add-hook 'server-after-make-frame-hook 'jj/setup-font-faces)
#+end_src

*** Mixed pitch

#+begin_src elisp :tangle post-init.el
  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode))
#+end_src

** Highlight Comment Annotations

#+begin_src elisp :tangle post-init.el
  (defun fx/highlight-todo-keywords ()
    "Add custom keywords for highlighting TODOs and similar annotations."
    (font-lock-add-keywords nil '(("\\<\\(TODO\\|FIXME\\|BUG\\|HACK\\|NOTE\\|REVIEW\\|DEPRECATED\\):" 1 font-lock-warning-face t))))
  (add-hook 'prog-mode-hook 'fx/highlight-todo-keywords)
#+end_src

** Keep window sizes reasonable

#+begin_src elisp :tangle post-init.el
  (use-package golden-ratio
    :diminish golden-ratio-mode
    :init
    (golden-ratio-mode 1)
    :custom
    (golden-ratio-auto-scale t))
#+end_src

** Window frame settings

#+begin_src elisp :tangle pre-early-init.el
  (add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

** Cursor settings
*** Adaptive cursor width
[[https://pragmaticemacs.wordpress.com/2017/10/01/adaptive-cursor-width/][Adaptive cursor width]]: make cursor the width of the character it is under. i.e. full width of a TAB.

#+begin_src elisp :tangle post-init.el
  (setq x-stretch-cursor t)
#+end_src

*** Box cursor

#+begin_src elisp :tangle post-init.el
  (use-package emacs
    :commands jj/cursor-type-mode
    :config
    (setq-default cursor-type 'box)
    (setq-default cursor-in-non-selected-windows '(bar . 2))
    (setq-default blink-cursor-blinks 50)
    (setq-default blink-cursor-interval 0.75)
    (setq-default blink-cursor-delay 0.2)

    (blink-cursor-mode -1)

    (define-minor-mode jj/cursor-type-mode
      "Toggle between static block and pulsing bar cursor."
      :init-value nil
      :global t
      (if prot/cursor-type-mode
          (progn
            (setq-local blink-cursor-interval 0.75
                        cursor-type '(bar . 2)
                        cursor-in-non-selected-windows 'hollow)
            (blink-cursor-mode 1))
        (dolist (local '(blink-cursor-interval
                         cursor-type
                         cursor-in-non-selected-windows))
          (kill-local-variable `,local))
        (blink-cursor-mode -1))))
#+end_src

** Line numbers

Display line numbers in programming mode.

#+begin_src elisp :tangle post-init.el
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setopt display-line-numbers-width 3)           ; Set a minimum width
  (setopt display-line-numbers-type 'relative)    ; Relative line numbers
#+end_src

** Text wrapping

Nice line wrapping when working with text. (Bedrock Emacs)

#+begin_src elisp :tangle post-init.el
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src

** Highlight line

Modes to highlight the current line with.

#+begin_src elisp :tangle post-init.el
  (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
    (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))
#+end_src

** Underlines

Prettier underlines from Bedrock Emacs

#+begin_src elisp :tangle post-init.el
  (setopt x-underline-at-descent-line nil)
#+end_src

By default, do underline trailing spaces from Bedrock Emacs

#+begin_src elisp :tangle post-init.el
  (setopt show-trailing-whitespace t)
#+end_src

* Interface
** Use ibuffer instead of list-buffers

~ibuffer~ is ~list-buffers~'s bigger brother from Mastering Emacs.

#+begin_src elisp :tangle post-init.el
  (global-set-key [remap list-buffers] 'ibuffer)
#+end_src

** Always use ~y~ and ~n~ as answers.

~yes-or-no-p~ will use ~y-or-n-p~. No more typing ~yes~.

#+begin_src elisp :tangle post-init.el
  (setopt use-short-answers t)
#+end_src

** Make C-g a bit more helpful

Copied from Prot's [[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/#h:1e468b2a-9bee-4571-8454-e3f5462d9321][basic and capable configuration]].

#+begin_src elisp :tangle post-init.el
  (defun prot/keyboard-quit-dwim ()
    "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))

  (global-set-key [remap keyboard-quit] 'prot/keyboard-quit-dwim)
#+end_src

** Which-Key

Show a popup of available keybindings when typing a key sequence.

#+begin_src elisp :tangle post-init.el
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** Interactive Do

Enable ido-mode

#+begin_src elisp :tangle post-init.el
(setq ido-enable-flex-matching t)
(setq ido-doeverywhere t)
(ido-mode 1)
#+end_src

** Org-mode customizations
*** Setup and bindings

#+begin_src elisp :tangle post-init.el
  (use-package org
    :ensure t
    :commands (org-mode org-version)
    :mode
    ("\\.org\\'" . org-mode)
    :custom
    (org-startup-truncated t)
    (org-agenda-files (list "~/Documents/Org/agenda.org"))
    (org-export-backends '(md))
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link)
           ("C-c b" . org-iswitchb)))
#+end_src

*** Distraction free writing

#+begin_src elisp :tangle post-init.el
  (use-package darkroom
    :bind ("C-c d r" . darkroom-tentative-mode))
#+end_src

* Development/Workspace
** Magit
*** Usage and configs
Enable and use the excellent magit

#+begin_src elisp :tangle post-init.el
  (use-package magit
    :bind (("C-c m s" . magit-status))
    :custom
    ;; Improve readability of diffs
    (magit-diff-refine-hunk 'all))
#+end_src

*** MacOS speedup
Speed up magit on macos

#+begin_src elisp :tangle post-init.el
  (use-package magit
    :if (eq system-type 'darwin)
    :custom
    (magit-git-executable "/opt/homebrew/bin/git"))
#+end_src

*** Highlight diffs in files

#+begin_src elisp :tangle post-init.el
  (use-package diff-hl
    :hook ((prog-mode . diff-hl-mode)
           (prog-mode . diff-hl-flydiff-mode)))
#+end_src

*** Language Modes
**** Odin-lang Mode

#+begin_src elisp :tangle post-init.el
  (unless (package-installed-p 'odin-mode)
    (package-vc-install "https://git.sr.ht/~mgmarlow/odin-mode"))
  (use-package odin-mode
    :bind (:map odin-mode-map
  	      ("C-c C-r" . 'odin-run-project)
  	      ("C-c C-c" . 'odin-build-project)
  	      ("C-c C-t" . 'odin-test-project)))
#+end_src

* Other
** Reload Init

Helper to reload init file

#+begin_src elisp :tangle post-init.el
  (defun reload-init-file ()
    "Reload the user's init file."
    (interactive)
    (load-file user-init-file)
    (keychain-refresh-environment))
#+end_src

#+begin_src elisp
  (native-comp-available-p)
#+end_src

* tangle post-init.el on save
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil 'make-it-local)
;; End:
